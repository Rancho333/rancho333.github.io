<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Rancho Blog</title>
    <link>https://rancho333.gitee.io/</link>
    
    <atom:link href="https://rancho333.gitee.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>No pain, no gain!</description>
    <pubDate>Wed, 28 Apr 2021 06:50:47 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>SONiC中ARP测试用例简析</title>
      <link>https://rancho333.gitee.io/2021/04/26/SONiC%E4%B8%ADARP%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%80%E6%9E%90/</link>
      <guid>https://rancho333.gitee.io/2021/04/26/SONiC%E4%B8%ADARP%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%80%E6%9E%90/</guid>
      <pubDate>Mon, 26 Apr 2021 08:08:45 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本文简要分析SONiC testbed中ARP测试用例的实现，作为对&lt;a href=&quot;https://rancho333.g</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本文简要分析SONiC testbed中ARP测试用例的实现，作为对<a href="https://rancho333.gitee.io/2020/12/25/ARP%E5%8D%8F%E8%AE%AE%E7%AE%80%E8%BF%B0%E5%8F%8A%E5%BA%94%E7%94%A8/">ARP协议简述及应用</a>的补充。</p><h2 id="背景知识简述"><a href="#背景知识简述" class="headerlink" title="背景知识简述"></a>背景知识简述</h2><p>ARP直接基于以太帧进行封装，<code>type</code>类型为<code>0x0806</code>，报文很简单，只有两类：ARP request报文和ARP reply报文。其中request报文可分为三类：<br>    1. 单播request，参考rfc1122，一种arp缓存刷新机制<br>    2. 广播request，这也是常见的arp请求报文<br>    3. 免费arp报文，sender ip和destination ip相同</p><h2 id="测试用例简析"><a href="#测试用例简析" class="headerlink" title="测试用例简析"></a>测试用例简析</h2><p>测试拓扑抽象简化如下：</p><p><img src="https://rancho333.gitee.io/pictures/arp_test_topology.png"></p><p>在<code>sonic-mgmt/tests/arp</code>下共有4个测试文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test_arpall.py</span><br><span class="line">test_neighbor_mac_noptf.py</span><br><span class="line">test_neighbor_mac.py</span><br><span class="line">test_wr_arp.py</span><br></pre></td></tr></table></figure><p>本文会分析<code>test_arpall.py</code>文件，对于其它三个文件会简要说明一下，最后对测试失败的<code>test_wr_arp.py</code>做一个分析。</p><p><code>test_arpall.py</code>中设计了5中测试用例：</p><ol><li>发送单播arp request</li><li>发送广播arp request</li><li>发送不同网段的arp request(sender ip字段异常)</li><li>免费arp测试</li></ol><h3 id="单播arp-request测试"><a href="#单播arp-request测试" class="headerlink" title="单播arp request测试"></a>单播arp request测试</h3><p>测试代码在<code>sonic-mgmt/tests/arp/test_arpall.py</code>文件中，对该模块代码截取简析如下：</p><p><img src="https://rancho333.gitee.io/pictures/arp_unicast_reply.png"></p><p>报文构造代码在<code>sonic-mgmt/ansible/roles/test/files/ptftests/arptest.py</code>文件中，对应的ARP包构造函数内容如下：</p><p><img src="https://rancho333.gitee.io/pictures/verifyunicastarpreply.png"></p><p>基本流程就是构造单播arp request报文，之后获取dut的arp表，看发送arp request的端口arp条目是否存在。根据rfc1122，这是unicast poo(单播轮询)：定时向ARP缓存条目中的主机发送点到点的ARP请求报文，假如在N次连续超时时间过后，没有收到对应主机的ARP响应报文，则将此条目从ARP缓存中删除。</p><p>其实这样测试并不能测试出unicast poll的定义，和普通ARP 请求没啥区别。</p><h3 id="广播arp-request测试"><a href="#广播arp-request测试" class="headerlink" title="广播arp request测试"></a>广播arp request测试</h3><p>测试代码如下：</p><p><img src="https://rancho333.gitee.io/pictures/arp_expect_reply.png"></p><p>对应的ARP包构造函数内容如下：</p><p><img src="https://rancho333.gitee.io/pictures/expectreply.png"></p><p>如上面的分析，和单播arp请求没啥区别，虽然ser intf1的mac改了一下，但无关紧要。</p><h3 id="收到的arp报文请求的不是本接口mac"><a href="#收到的arp报文请求的不是本接口mac" class="headerlink" title="收到的arp报文请求的不是本接口mac"></a>收到的arp报文请求的不是本接口mac</h3><p>测试代码如下：</p><p><img src="https://rancho333.gitee.io/pictures/arp_no_reply_other_intf.png"><br>这里asset判断的ip错了，应该是不等于10.10.1.22才对。</p><p>对应的ARP包构造函数内容如下：</p><p><img src="https://rancho333.gitee.io/pictures/srcoutrangenoreply.png"></p><h3 id="收到的arp请求中的sender-ip与本接口不在同一网段"><a href="#收到的arp请求中的sender-ip与本接口不在同一网段" class="headerlink" title="收到的arp请求中的sender ip与本接口不在同一网段"></a>收到的arp请求中的sender ip与本接口不在同一网段</h3><p>和上面<code>收到的arp报文请求的不是本接口mac</code>的流程基本一致，只是将相同的arp request报文发给dut intf1。</p><h3 id="免费arp报文测试"><a href="#免费arp报文测试" class="headerlink" title="免费arp报文测试"></a>免费arp报文测试</h3><p>免费arp的测试分为两块，如果免费arp中的信息之前没有解析过，那么不应该响应免费arp报文，反之响应。</p><p>不响应的代码如下：</p><p><img src="https://rancho333.gitee.io/pictures/garp_no_update.png"></p><p>对应的ARP包构造函数内容如下：</p><p><img src="https://rancho333.gitee.io/pictures/garpnoupdate.png"></p><p>此时即使dut收到了免费arp报文，但是<code>10.10.1.7</code>的信息并不在dut的arp表中，所以不应该有响应动作。</p><p>响应的代码如下：</p><p><img src="https://rancho333.gitee.io/pictures/garp_update.png"><br>可以看到先调用<code>ExpectReply</code>让<code>10.10.1.3</code>存在于dut的arp表中，之后再调用<code>GarpUpdate</code>更新mac，MAC地址由<code>00:06:07:08:09:0a</code>更新为<code>00:00:07:08:09:0a</code>。</p><p>对应的ARP包构造函数内容如下：</p><p><img src="https://rancho333.gitee.io/pictures/garpupdate.png"><br>这里面修改了<code>10.10.1.3</code>对应的MAC地址。</p><h2 id="其它三个测试文件说明"><a href="#其它三个测试文件说明" class="headerlink" title="其它三个测试文件说明"></a>其它三个测试文件说明</h2><p>对于<code>test_neighbor_mac_noptf.py</code>，ptf作为dut的邻居，针对ipv4和ipv6两种场景，分别测试在DUT的redis中和arp表中能不能找到另据的arp entry。<br>对于<code>test_neighbor_mac.py</code>，ptf作为dut的邻居，使用相同的ip(ipv4)，映射两个不同的mac地址，分别测试这两个mac在redis中存不存在。<br>对于<code>test_wr_arp.py</code>测试热重启过程中的arp功能，首先在ptf上开启ferret server，之后让dut进入warm-reboot，在此过程中，ptf发送arp request，25秒内没有收到arp reply测试失败。</p><h2 id="测试结果说明"><a href="#测试结果说明" class="headerlink" title="测试结果说明"></a>测试结果说明</h2><p>以<code>10.204.112.27:8080</code>上的<code>seastone-t0</code>为例说明，测试结果如下：</p><p><img src="https://rancho333.gitee.io/pictures/testbed_wrarp_seastone.png"></p><p>可以看到<code>test_wr_arp.py</code>测试失败了，结果不符合预期。wr_arp首先在ptf host上开启ferret服务，之后在dut上启动warm-reboot程序，当dut处于warm-reboot阶段时，向其vlan成员发送arp请求报文，25秒内任一vlan成没有响应则测试失败。</p><p>而在<code>seastone2-t0</code>上面，该项测试失败，但是原因不一样：</p><p><img src="https://rancho333.gitee.io/pictures/testbed_wrarp_seastone2.png"><br>此处是没有获取到ptf宣告的ip，这个网段应该由zebra下发到kernel，src字段为dut的loopback。</p>]]></content:encoded>
      
      
      
      <category domain="https://rancho333.gitee.io/tags/SONiC/">SONiC</category>
      
      
      <comments>https://rancho333.gitee.io/2021/04/26/SONiC%E4%B8%ADARP%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%80%E6%9E%90/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>SONiC中OSPF使用简述</title>
      <link>https://rancho333.gitee.io/2021/04/23/SONiC%E4%B8%ADOSPF%E4%BD%BF%E7%94%A8%E7%AE%80%E8%BF%B0/</link>
      <guid>https://rancho333.gitee.io/2021/04/23/SONiC%E4%B8%ADOSPF%E4%BD%BF%E7%94%A8%E7%AE%80%E8%BF%B0/</guid>
      <pubDate>Fri, 23 Apr 2021 07:32:20 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;承接上文&lt;a href=&quot;https://rancho333.gitee.io/2021/04/08/SONiC%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE%E7%AE%80%E8%BF%B0/&quot;&gt;SONiC路由协议简述&lt;/a&gt;，这边文章记录SONiC上使能OSPF的过程。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>承接上文<a href="https://rancho333.gitee.io/2021/04/08/SONiC%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE%E7%AE%80%E8%BF%B0/">SONiC路由协议简述</a>，这边文章记录SONiC上使能OSPF的过程。</p><span id="more"></span><h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><h3 id="拓扑说明"><a href="#拓扑说明" class="headerlink" title="拓扑说明"></a>拓扑说明</h3><p>拓扑图如下：</p><p><img src="https://rancho333.gitee.io/pictures/ospf-topology.png"></p><p>实验预期：</p><ol><li>三台设备上能建立ospf邻居，完成LSDB交换，建立ospf路由</li><li><code>192.168.1.2</code>能够<code>ping</code>通<code>192.168.2.2</code></li></ol><h3 id="启动OSPF"><a href="#启动OSPF" class="headerlink" title="启动OSPF"></a>启动OSPF</h3><p>在<code>bgp</code>容器中启动<code>ospf</code>进程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;lib&#x2F;frr&#x2F;ospfd -A 127.0.0.1 -d</span><br></pre></td></tr></table></figure><p>参照<code>bgpd</code>的启动过程，将ospf添加到supervisor中，并指定配置文件，在<code>/etc/supervisor/conf.d/supervisord.conf</code>中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[program:ospfd]</span><br><span class="line">command&#x3D;&#x2F;usr&#x2F;lib&#x2F;frr&#x2F;ospfd -A 127.0.0.1 -f &#x2F;etc&#x2F;frr&#x2F;ospfd.conf</span><br><span class="line">priority&#x3D;5</span><br><span class="line">stopsignal&#x3D;KILL</span><br><span class="line">autostart&#x3D;false</span><br><span class="line">autorestart&#x3D;false</span><br><span class="line">startsecs&#x3D;0</span><br><span class="line">stdout_logfile&#x3D;syslog</span><br><span class="line">stderr_logfile&#x3D;syslog</span><br></pre></td></tr></table></figure><p>在<code>/usr/bin/start.sh</code>中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl start ospfd</span><br></pre></td></tr></table></figure><p>创建ospf配置文件<code>/etc/frr/ospfd.conf</code>, 根据具体业务添加配置内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">frr version 7.2.1-sonic</span><br><span class="line">frr defaults traditional</span><br><span class="line">hostname lambda</span><br><span class="line">router ospf</span><br><span class="line"> network 192.168.1.0&#x2F;24 area 0</span><br></pre></td></tr></table></figure><h3 id="配置接口IP"><a href="#配置接口IP" class="headerlink" title="配置接口IP"></a>配置接口IP</h3><p>在SONiC命令行中可配置接口ip，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config interface ip add 192.168.2.1&#x2F;24</span><br></pre></td></tr></table></figure><p>zebra会通过netlink获取接口配置，反之在vty中配置接口ip不能同步到sonic。也可将配置写到配置文件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;INTERFACE&quot;: &#123;              </span><br><span class="line">        &quot;Ethernet1|192.168.1.1&#x2F;24&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Ethernet2|192.168.2.1&#x2F;24&quot;: &#123;&#125;                                                                                                                                                                                                                                                                               </span><br><span class="line">    &#125;,      </span><br></pre></td></tr></table></figure><p>配置完成之后，在vty中可以看到使能了ospf的接口：</p><p><img src="https://rancho333.gitee.io/pictures/ospf-interface.png"></p><p>注意将接口的mtu配置成1500或者在ospf中关闭mtu check。</p><h3 id="配置ASIC"><a href="#配置ASIC" class="headerlink" title="配置ASIC"></a>配置ASIC</h3><p>SONiC中默认ospf报文不送CPU，这可能和各家的SDK初始化实现有关。在broadcom下我们需要做一些配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fp qset add ipprotocol</span><br><span class="line">fp group create 20 21    (20是优先级， 21是group-id)</span><br><span class="line">fp entry create 21 3000    （3000是entry-id，这是一个全局的值，注意不能重叠）</span><br><span class="line">fp qual  3000 ipprotocol 89 0xffff(指定copy-to-cpu的协议特征)</span><br><span class="line">fp action add 3000 CopyToCpu 0 0（对匹配到特征的协议指定动作）</span><br><span class="line">fp entry install 3000（使能配置）</span><br><span class="line">fp show entry 3000                        （验证配置）</span><br></pre></td></tr></table></figure><p>应当在ASIC中看到使能的配置：</p><p><img src="https://rancho333.gitee.io/pictures/ospf-asic.png"></p><p>sonic中提供了copp功能配置sdk下发这些报文上CPU等的控制操作，受当前实验版本限制暂不做这方面深入研究。</p><h3 id="功能验证"><a href="#功能验证" class="headerlink" title="功能验证"></a>功能验证</h3><p>查看邻居状态：</p><p><img src="https://rancho333.gitee.io/pictures/ospf-neighbour.png"></p><p>查看数据库信息：</p><p><img src="https://rancho333.gitee.io/pictures/ospf-database.png"></p><p>查看路由表：</p><p><img src="https://rancho333.gitee.io/pictures/ospf-route.png"></p><p>ping测试：</p><p><img src="https://rancho333.gitee.io/pictures/ospf-ping.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>当前SONiC上ospf功能使能需要做三方面的配置：</p><ol><li>ospf自身，包括功能启用以及协议参数配置</li><li>启用ospf协议的接口</li><li>配置ASIC，协议报文上CPU</li></ol>]]></content:encoded>
      
      
      
      <category domain="https://rancho333.gitee.io/tags/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/">通信协议</category>
      
      <category domain="https://rancho333.gitee.io/tags/SONiC/">SONiC</category>
      
      
      <comments>https://rancho333.gitee.io/2021/04/23/SONiC%E4%B8%ADOSPF%E4%BD%BF%E7%94%A8%E7%AE%80%E8%BF%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>OSPF学习</title>
      <link>https://rancho333.gitee.io/2021/04/19/OSPF%E5%AD%A6%E4%B9%A0/</link>
      <guid>https://rancho333.gitee.io/2021/04/19/OSPF%E5%AD%A6%E4%B9%A0/</guid>
      <pubDate>Mon, 19 Apr 2021 07:31:37 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;跟着上文&lt;a href=&quot;https://rancho333.gitee.io/2021/04/08/SONiC%E8%B7</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>跟着上文<a href="https://rancho333.gitee.io/2021/04/08/SONiC%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE%E7%AE%80%E8%BF%B0/">SONiC路由协议简述</a>, 这篇文章记录一下OSPF协议的学习内容。</p><h2 id="OSPF简介"><a href="#OSPF简介" class="headerlink" title="OSPF简介"></a>OSPF简介</h2><p>OSPF(open shortest path first，开放最短路径优先)是一种基于链路状态的动态路由协议，相较于RIP周期性的洪泛自己的路由表，无法了解网络的拓扑结构，只是通过路由更新以及简单的机制来学习路由(依照传闻的更新)， OSPF交互的是链路状态，每台OSPF路由器都知晓网络拓扑。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.h3c.com/cn/d_200805/605874_30003_0.htm">OSPF技术介绍</a><br><a href="http://ccietea.com/Folder_TechNotes/OSPF.pdf">OSPF笔记</a></p>]]></content:encoded>
      
      
      
      <category domain="https://rancho333.gitee.io/tags/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/">通信协议</category>
      
      
      <comments>https://rancho333.gitee.io/2021/04/19/OSPF%E5%AD%A6%E4%B9%A0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>SONiC路由协议简述</title>
      <link>https://rancho333.gitee.io/2021/04/08/SONiC%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE%E7%AE%80%E8%BF%B0/</link>
      <guid>https://rancho333.gitee.io/2021/04/08/SONiC%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE%E7%AE%80%E8%BF%B0/</guid>
      <pubDate>Thu, 08 Apr 2021 09:38:53 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本文通过研究SONiC中已支持的路由协议BGP，了解SONiC中路由模块的工作流程，进而为支持SONiC中暂未支持的路由协议（ospf、rip、pim）的porting打下基础。以协议栈收包，协议栈状态机运转，协议栈表项生成下发至SDK为方向进行研究。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本文通过研究SONiC中已支持的路由协议BGP，了解SONiC中路由模块的工作流程，进而为支持SONiC中暂未支持的路由协议（ospf、rip、pim）的porting打下基础。以协议栈收包，协议栈状态机运转，协议栈表项生成下发至SDK为方向进行研究。</p><span id="more"></span><h2 id="SONiC中支持的协议"><a href="#SONiC中支持的协议" class="headerlink" title="SONiC中支持的协议"></a>SONiC中支持的协议</h2><p>SONiC中支持BGP、ECMP、LLDP、QoS、SNMP、NTP、DHCP、VxLAN、NAT、ARP等协议。其中，使用FRR作为默认路由协议栈。运行在<code>bdp</code>容器中。</p><h2 id="初步了解FRR"><a href="#初步了解FRR" class="headerlink" title="初步了解FRR"></a>初步了解FRR</h2><p>对于FRR的框架不做过多赘述，可以参见《FRR开源代码研究》，其脱胎于quagga。SONiC中FRR运行在<code>bgp</code>容器中，运行<code>docker exec -it bgp bash</code>进入该容器，但是SONiC中现在只支持BGP协议。执行<code>vtysh</code>进入FRR命令行，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@sonic:&#x2F;# vtysh </span><br><span class="line"></span><br><span class="line">Hello, this is FRRouting (version 7.2.1-sonic).</span><br><span class="line">Copyright 1996-2005 Kunihiro Ishiguro, et al.</span><br></pre></td></tr></table></figure><p>在<code>201911</code>分支上使用的是7.2.1, 在<code>~/rules/frr.mk</code>中可以看到。SONiC的master分支使用的FRR版本是7.5.1(sonic基于此进行porting),与FRR官方最新的<a href="https://github.com/FRRouting/frr/releases">release</a>保持一致。</p><p>在进行FRR模块调试的过程中，我们可以单独更新FRR模块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[rancho sonic-buildimage]$ make list | grep frr</span><br><span class="line">&quot;ROUTING_STACK&quot;                   : &quot;frr&quot;</span><br><span class="line">target&#x2F;debs&#x2F;stretch&#x2F;frr_7.2.1-sonic-0_amd64.deb</span><br><span class="line">target&#x2F;debs&#x2F;stretch&#x2F;frr-pythontools_7.2.1-sonic-0_all.deb</span><br><span class="line">target&#x2F;debs&#x2F;stretch&#x2F;frr-dbgsym_7.2.1-sonic-0_amd64.deb</span><br><span class="line">target&#x2F;debs&#x2F;stretch&#x2F;frr-snmp_7.2.1-sonic-0_amd64.deb</span><br><span class="line">target&#x2F;debs&#x2F;stretch&#x2F;frr-snmp-dbgsym_7.2.1-sonic-0_amd64.deb</span><br><span class="line">target&#x2F;docker-fpm-frr.gz</span><br><span class="line">target&#x2F;docker-fpm-frr-dbg.gz</span><br></pre></td></tr></table></figure><h2 id="SONiC中路由模块的交互"><a href="#SONiC中路由模块的交互" class="headerlink" title="SONiC中路由模块的交互"></a>SONiC中路由模块的交互</h2><p>SONiC中路由模块交互如下图所示：</p><p><img src="https://rancho333.gitee.io/pictures/frr-sonic.png"> </p><ol><li>在BGP容器初始化时， zebra通过TCP socket连接到<code>fpmsyncd</code>。在稳定状态下，zebra、linux kernel、APPL_DB、ASIC_DB、ASIC中的路由表应该是完全一致的。<br>这里做一点说明，OSPF、BGP等路由进程会将自己选择出的路由发送给zebra，zebra通过计算筛选之后会通过netlink将之同步给kernel，同时zebra通过FPM(forwarding plane manger)将之同步给ASIC。zebra中运行FPM client，通过TCP socket与FPM server进行通信。FPM client端代码如下：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//zebra_fpm.c</span></span><br><span class="line">    serv.sin_family = AF_INET;</span><br><span class="line">    serv.sin_port = htons(zfpm_g-&gt;fpm_port);                    <span class="comment">//fpm默认使用2620端口</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> HAVE_STRUCT_SOCKADDR_IN_SIN_LEN</span></span><br><span class="line">    serv.sin_len = <span class="keyword">sizeof</span>(struct sockaddr_in);                                     </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* HAVE_STRUCT_SOCKADDR_IN_SIN_LEN */</span></span></span><br><span class="line">    <span class="keyword">if</span> (!zfpm_g-&gt;fpm_server)</span><br><span class="line">        serv.sin_addr.s_addr = htonl(INADDR_LOOPBACK);          <span class="comment">//FPM server一般部署在本机上</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        serv.sin_addr.s_addr = (zfpm_g-&gt;fpm_server);</span><br></pre></td></tr></table></figure></li></ol><p>FRR定义了FPM的数据格式，类似于协议报文，用户自己实现FPM server，解析出client发送过来的路由数据，然后进行相应的处理。</p><ol start="2"><li><p>Bgpd处理收到的协议报文，以bgp-update报文为例，将计算得到的路由信息发送给zebra</p></li><li><p>zebra根据自身的计算策略过滤该路由，如果通过zebra则生成route-netlink信息将路由信息发送给kernel</p></li><li><p>同时，zebra通过FPM接口将route-netlink信息发送给<code>fpmsyncd</code>，2,3,4的大致流程参见下图：<br><img src="https://rancho333.gitee.io/pictures/frr-bgpd.png"> </p></li><li><p>Fpmsyncd处理该信息并将之放入<code>APPL_DB</code><br>SONiC中FPM server在<code>fpmsyncd</code>中实现，源码在<code>sonic-swss</code>中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fpmsyncd.cpp  连接redis APPL_DB</span></span><br><span class="line"><span class="function">DBConnector <span class="title">db</span><span class="params">(<span class="string">&quot;APPL_DB&quot;</span>, <span class="number">0</span>)</span></span>; </span><br><span class="line"><span class="function">RedisPipeline <span class="title">pipeline</span><span class="params">(&amp;db)</span></span>;</span><br><span class="line"><span class="function">RouteSync <span class="title">sync</span><span class="params">(&amp;pipeline)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//fpmlink.cpp  创建socket，做为FPM server</span></span><br><span class="line">addr.sin_family = AF_INET;                          </span><br><span class="line">addr.sin_port = htons(port);                        <span class="comment">//port为2620, 在fpm/fpm.h中定义</span></span><br><span class="line">addr.sin_addr.s_addr = htonl(INADDR_LOOPBACK);      <span class="comment">//部署在本地</span></span><br></pre></td></tr></table></figure></li></ol><p>编译过程中会打包到<code>swss_1.0.0_amd64.deb</code>，在<code>dockers/docker-fpm-frr/Dockerfile.j2</code>会将其安装到<code>docker-fpm-frr</code>镜像中。在BGP进程中可以看到该进程。在<code>/etc/supervisor/conf.d/supervisord.conf</code>中可以看到各服务的启动控制：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[program:bgpd]</span><br><span class="line">command&#x3D;&#x2F;usr&#x2F;lib&#x2F;frr&#x2F;bgpd -M bmp -A 127.0.0.1</span><br><span class="line">priority&#x3D;6</span><br><span class="line"></span><br><span class="line">[program:fpmsyncd]</span><br><span class="line">command&#x3D;fpmsyncd</span><br><span class="line">priority&#x3D;8</span><br></pre></td></tr></table></figure><ol start="6"><li><p><code>orchagentd</code>作为APPL_DB的订阅者，它会收到fpmsyncd发布的信息</p></li><li><p>orchagentd作为一个中转站，会调用sairedis的APIs将信息发布到ASIC_DB</p></li><li><p><code>syncd</code>作为ASIC_DB的订阅者，它会收到orchagend发布的信息</p></li><li><p>Syncd调用SAI APIs将路由信息下发到SDK</p></li><li><p>最终新的路由规则在ASIC中生效</p></li></ol><p>FRR与SONiC的完整交互流程图示如下：</p><p><img src="https://rancho333.gitee.io/pictures/route-flow.png"></p><h2 id="静态路由的实现"><a href="#静态路由的实现" class="headerlink" title="静态路由的实现"></a>静态路由的实现</h2><p>基于以上的SONiC路由实现流程，我们可以实现一个<code>FPM client</code>，按照ZAPI的格式封装netlink路由数据发送给<code>fpmsyncd</code>，之后在各个数据中转节点验证路由是否按设定的流程转发最终生效到ASIC。这样可以脱离<code>FRR</code>的协议栈逻辑，只借用FPM模块。</p><p>当然，我们可以直接通过FRR的配置文件或者<code>vtysh</code>来下发静态路由，有一个进程<code>staticd</code>用来处理静态路由。<br>路由下发的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip route 192.168.2.0&#x2F;24 PortChannel0001</span><br></pre></td></tr></table></figure><p>验证一下命令是否生效：</p><p><img src="https://rancho333.gitee.io/pictures/show-ip-route.png"></p><p>看下在kernel中是否生效：</p><p><img src="https://rancho333.gitee.io/pictures/ip-route-show.png"></p><p>查看是否同步到<code>APPL_DB</code>中：</p><p><img src="https://rancho333.gitee.io/pictures/appl-db.png"></p><p>查看是否同步到<code>ASIC_DB</code>中：</p><p><img src="https://rancho333.gitee.io/pictures/asic-db.png"></p><p>查看是否下发到<code>ASIC</code>中：</p><p><img src="https://rancho333.gitee.io/pictures/asic-route.png"></p><p>可以看到路由信息按照<code>SONiC中路由模块的交互</code>中描述的进行处理下发。</p><h2 id="对于单播-OSPF、RIP-以及组播-PIM-的支持"><a href="#对于单播-OSPF、RIP-以及组播-PIM-的支持" class="headerlink" title="对于单播(OSPF、RIP)以及组播(PIM)的支持"></a>对于单播(OSPF、RIP)以及组播(PIM)的支持</h2><p>对于支持上述协议，需要回答几个问题：</p><ol><li>从哪里获取信息（端口状态变化、控制报文、数据报文是怎么送到协议栈的）</li><li>协议状态机变化 (问题怎么定位以及功能的支持程度, 至于测试，需要专业协议测试人员介入)</li><li>控制面信息如何生效到转发面 (协议栈控制信息同步到kernel与ASIC)</li></ol><p>SONiC默认只启动了<code>bgpd</code>和<code>staticd</code>这两个路由进程，尝试手动开启<code>ospf</code>、<code>rip</code>、<code>pim</code>并为发现异常：</p><p><img src="https://rancho333.gitee.io/pictures/frr-routes.png"></p><p>SONIC本身并未对FRR做什么修改，只是增加了一个FPM server模块，整个路由通路是没有问题的，理论上是<em>完全可以支持FRR中的其它路由协议</em>的，很好奇为什么微软不顺手把这些做了？<br>难道是因为数据中心中只要BGP+ECMP+VxLAN?</p><p>下面做一个工作量的评估（基于单个协议）</p><ol><li><p>协议学习2周</p></li><li><p>OSPF、PIM基于IP，使用protocol创建socket与keenel进行通信，RIP基于UDP，BGP基于TCP。ospf创建socket如下：</p></li></ol><p><img src="https://rancho333.gitee.io/pictures/ospf-sock.png"><br>控制报文调试1周，这玩意要是顺利应该就几分钟，大概率没啥问题。</p><ol start="3"><li><p>看代码，了解协议状态机，了解常见的测试拓扑，搭建测试拓扑，生成路由信息，2周</p></li><li><p>打通路由下发，1周</p></li><li><p>协议维护，解bug，不定</p></li></ol><p>其实，从技术上说，很可能SONiC是已经支持上述路由协议了，只要开启相应进程，所以测试吧！说不定有惊喜！</p>]]></content:encoded>
      
      
      
      <category domain="https://rancho333.gitee.io/tags/SONiC/">SONiC</category>
      
      
      <comments>https://rancho333.gitee.io/2021/04/08/SONiC%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE%E7%AE%80%E8%BF%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>sonic-testbed的理解</title>
      <link>https://rancho333.gitee.io/2021/03/02/sonic-testbed%E7%9A%84%E7%90%86%E8%A7%A3/</link>
      <guid>https://rancho333.gitee.io/2021/03/02/sonic-testbed%E7%9A%84%E7%90%86%E8%A7%A3/</guid>
      <pubDate>Tue, 02 Mar 2021 11:00:15 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;这篇文章用来记录对sonic testbed的一些理解以及一些较核心的知识点。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这篇文章用来记录对sonic testbed的一些理解以及一些较核心的知识点。</p><span id="more"></span><p>sonic-mgmt代码运行在docker-sonic-mgmt环境中中，镜像在sonic-buildimage中编译生成，docker-ptf也是在里面生成的。docker-sonic-mgmt环境集成了ansible-playbook、pytest、spytest等所需的依赖。</p>]]></content:encoded>
      
      
      
      <category domain="https://rancho333.gitee.io/tags/SONiC/">SONiC</category>
      
      
      <comments>https://rancho333.gitee.io/2021/03/02/sonic-testbed%E7%9A%84%E7%90%86%E8%A7%A3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>对SONiC项目的认识</title>
      <link>https://rancho333.gitee.io/2021/02/25/%E5%AF%B9SONiC%E9%A1%B9%E7%9B%AE%E7%9A%84%E8%AE%A4%E8%AF%86/</link>
      <guid>https://rancho333.gitee.io/2021/02/25/%E5%AF%B9SONiC%E9%A1%B9%E7%9B%AE%E7%9A%84%E8%AE%A4%E8%AF%86/</guid>
      <pubDate>Thu, 25 Feb 2021 05:36:57 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;SONiC简介&quot;&gt;&lt;a href=&quot;#SONiC简介&quot; class=&quot;headerlink&quot; title=&quot;SONiC简介&quot;&gt;&lt;/a&gt;SONiC简介&lt;/h1&gt;&lt;p&gt;不做过多赘述，SONiC本质就是一个Linux交换机网络操作系统，它有两个特点。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="SONiC简介"><a href="#SONiC简介" class="headerlink" title="SONiC简介"></a>SONiC简介</h1><p>不做过多赘述，SONiC本质就是一个Linux交换机网络操作系统，它有两个特点。</p><span id="more"></span><p>第一，它是基于SAI的，在没有SAI之前所有的芯片都要通过自己的SDK与上层软件进行通信，相当于用自己的“方言”与上层操作系统通信，SAI把这个“方言”标准化，大家的芯片用同样的语言同上层的控制软件交流，因为有了SAI，所以才能建立一个操作系统。有了SAI之后，适配ASIC的工作由芯片厂商完成，白盒交换机厂商推出一款新产品所花费的时间大大缩短。</p><p>第二，基于Docker，Sonic有丰富的扩展性。依托于Linux,Docker生态，Sonic孕育了丰富的管理软件和解决方案。而其自身也于Redis, Quagga, LLDP等开源技术碰撞出更多火花。</p><p>2016年，SONiC的理念就是将传统交换机OS拆分成多个容器化组件的解决方案，进而也定义了控制面的容器化架构，囊括了组件和编程接口。</p><p>2017年微软对SONiC的性能进行了大幅升级，全面支持IDV，并且融合了更多的容器特性。</p><p>2018年微软又在管理性上下了大力气（如ConfigDB）</p><h1 id="对SONiC项目的学习"><a href="#对SONiC项目的学习" class="headerlink" title="对SONiC项目的学习"></a>对SONiC项目的学习</h1><p>相比于传统Linux交换机操作系统几十M的镜像大小，SONiC镜像动辄几百M甚至超1G，这也说明了里面包含的内容极其庞杂。如果有比较深厚的Linux功底，上手会很快。因为里面大多是Linux本质性、不变性和可复用性的东西。以自己对SONiC项目的认知，将其划分为5个大块比较合适。分别是：</p><ul><li>SONiC的编译</li><li>SONiC的安装</li><li>SONiC的bring up</li><li>SONiC的上层应用</li><li>TestBed自动化测试</li></ul><h2 id="SONiC的编译"><a href="#SONiC的编译" class="headerlink" title="SONiC的编译"></a>SONiC的编译</h2><p>这一步本身就是一个庞大的源码编译出Linux安装镜像的过程，类比于LFS。这里可以借用嵌入式操作系统移植的4个步骤用来辅助说明。</p><ol><li>交叉编译环境的制作。一般而言，SONiC的宿主机与目标机都是x86，所以没有交叉编译这种说法，但是sonic是支持ARM和ARM64的，只是现阶段我没玩过。值得关注的是，SONiC在编译之前会制作一个docker用来打包编译环境，之后所有的编译在里面完成。</li><li>kernel的配置、编译、移植。SONiC在kernel编译时会指定config，参见kernel的Makefile，我们可以按需修改。</li><li>根文件系统的制作。SONiC使用debootstrap完成文件系统的基础架构，之后会将编译好的deb包，whl包等target释放或拷贝到rootfs中去，最终生成的sonic-platform.bin是一个fs.zip、fs.squashfa、docker.tar.gz以及初始化脚本的打包可执行文件。</li><li>bootloader的移植。裸机装bios没有玩过，SONiC盒子需要在bios之上安装一个ONIE，ONIE本质是一个小的Linux，提供SONiC安装环境</li></ol><p>对于这一部分，如果有一个比较全面的概览，当有porting或任何需要修改源码的需求时，将会有一定方向性。SONiC的编译框架主要由shell脚本，Makefile，Dockefile以及j2模板文件构成，需要有一定的Makefile、shell脚本基础。</p><h2 id="SONiC的安装"><a href="#SONiC的安装" class="headerlink" title="SONiC的安装"></a>SONiC的安装</h2><p>SONiC的安装是某种程度上是生成镜像的一个逆向过程。sonic-asic.bin是一个shell脚本，可以在shell下直接执行一下看看会发生什么事情。SONiC安装的本质其实就是bash ./sonic-asic.bin的执行过程。</p><p>SONiC可以在ONIE和SONiC环境下完成安装，这里面会调用两个脚本sharch_body.sh和install.sh。SONiC的安装时会有一些打印，参照打印与shell脚本可以发现里面做了什么,关注一下<code>/boot</code>目录。在此处简单说明一下：</p><ul><li>在sharch_body.sh中<ul><li>对image文件进行hash校验</li><li>为install.sh准备运行环境并执行install.sh</li></ul></li><li>在install.sh中<ul><li>确定安装环境（ONIE、SONiC、build）</li><li>调用machine.conf，准备platform相关环境变量，配置console，默认是ttyS0和9600。参数设置不匹配将导致SONiC bring up失败。新安装的onie，需要在onie下修改eeprom以及machine.conf(这个可以在onie编译的时候指定)。需要关注修改三个字段：onie_switch_asic、onie_machine、onie_platform。</li><li>安排安装os的分区（uefi+gpt）</li><li>解压fs.zip(boot+platform+docker+fs.squashfs)至分区，onie和SONiC安装会有一些细微差别。这里将创建boot和platform文件夹（在sonic的/host/image*下面，不是根目录），将驱动放到对应文件夹下，在rc.local中会释放出来。</li><li>配置grub，安装完成 </li><li>重启之后会按照安装时设置的grud启动新的操作系统</li></ul></li></ul><h2 id="SONiC的bring-up"><a href="#SONiC的bring-up" class="headerlink" title="SONiC的bring up"></a>SONiC的bring up</h2><p>SONiC基于SAI可以： 一个镜像适配相同ASIC厂家的不同设备型号，每一个款设备都有自己的差异性配置文件，如端口，led，波特率等。SONiC是如何正确加载对应设备型号的配置文件的？这里留个问题可以自己查查。</p><p>SONiC是Linux, 所以遵循Linux的启动过程。</p><ol><li><p>bootloader + onie阶段<br>我们可以在onie下安装sonic，grub将cmdline参数传递给kernel，kernel启动，加载驱动</p></li><li><p>kernel启动之后systemd初始化阶段这里面可以细分</p><ul><li>systemd相关，使用<code>systemctl list-dependencies graphical.target</code>查看当前加载的服务 </li><li>rc.local，这里面有一些启动后执行的动作，自己瞅瞅吧</li></ul></li></ol><p>需要关注一下SONiC的文件系统</p><ul><li>fdisk -l     查看有哪些分区,以及分区大小。那么如何调整分区大小？改那个配置文件？</li><li>df 查看下那些文件夹挂载在物理硬盘分区上</li><li>cat /proc/cmdline    查看内核启动参数</li><li>blkid            查看分区对应的PARTUUID</li></ul><h2 id="SONiC的上层应用"><a href="#SONiC的上层应用" class="headerlink" title="SONiC的上层应用"></a>SONiC的上层应用</h2><p>SONiC的服务跑在docker中，如PMON、syncd、frr等。关于这些服务是如何启动的？可以参见《SONIC中docker运行服务的单分析》，源码中注意下<code>docker_image_ctl.j2</code>文件，这是docker的启动管理模板。</p><p>SONiC核心的功能就是交换路由，所以交换路由协议在里面是很重要的，与传统交换机相比，SONiC中的服务运行在docker中，使用redis集中式进行数据管理，其它并没有什么本质区别。</p><p>后续考虑以vxlan为切入点，深入了解学习SONiC的系统架构，对于vxlan，参见<a href="https://rancho333.gitee.io/2021/02/03/vxlan%E5%AD%A6%E4%B9%A0/">vxlan学习</a>。</p><p>如何配置管理SONiC呢？传统的交换机会做一个命令行程序，指定用户登录后执行该程序，可以称之为CLI，在里面可以进入shell，也可以从shell退回CLI。社区版SONiC登录之后运行bash，用python做了一套简单的命令行，可以进行配置管理，这玩意解析速度极慢，使用体验极差。除此之外，还可以通过修改<code>config_db.json</code>然后重新加载或者直接使用<code>redis</code>命令行进行配置。当然SONiC支持SDN，可以通过openflow方式集中式管理配置。阿里在SONiC上面做了一套传统CLI，称之为<code>lambda-cli</code>，比社区版SONiC的命令行好用多了。</p><h2 id="TestBed自动化测试"><a href="#TestBed自动化测试" class="headerlink" title="TestBed自动化测试"></a>TestBed自动化测试</h2><p>TBD</p>]]></content:encoded>
      
      
      
      <category domain="https://rancho333.gitee.io/tags/SONiC/">SONiC</category>
      
      
      <comments>https://rancho333.gitee.io/2021/02/25/%E5%AF%B9SONiC%E9%A1%B9%E7%9B%AE%E7%9A%84%E8%AE%A4%E8%AF%86/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>shell重定向</title>
      <link>https://rancho333.gitee.io/2021/02/23/shell%E9%87%8D%E5%AE%9A%E5%90%91/</link>
      <guid>https://rancho333.gitee.io/2021/02/23/shell%E9%87%8D%E5%AE%9A%E5%90%91/</guid>
      <pubDate>Tue, 23 Feb 2021 05:28:38 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;shell重定向&quot;&gt;&lt;a href=&quot;#shell重定向&quot; class=&quot;headerlink&quot; title=&quot;shell重定向&quot;&gt;&lt;/a&gt;shell重定向&lt;/h1&gt;&lt;p&gt;shell重定向即重新确定数据的流向，是通过改变文件描述符目标来实现的，如流向&lt;code&gt;1&lt;/code&gt;的数据让其流向&lt;code&gt;/tmp/a.c&lt;/code&gt;。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="shell重定向"><a href="#shell重定向" class="headerlink" title="shell重定向"></a>shell重定向</h1><p>shell重定向即重新确定数据的流向，是通过改变文件描述符目标来实现的，如流向<code>1</code>的数据让其流向<code>/tmp/a.c</code>。</p><span id="more"></span><p>shell中，基础重定向有以下几种方式：</p><ul><li><p><code>[n]&gt;file</code>：覆盖式输出重定向，输出到fd=n的数据改变流向输出到file文件中，file不存在则创建，file存在则先清空再写入数据</p><ul><li>n可省略，默认值为<code>1</code>，即标准输出覆盖重定向到file中</li><li><code>&gt;&gt;</code>表示追加式输出重定向</li></ul></li><li><p><code>[n]&lt;file</code>:输入重定向，以读取模式打开文件并分配fd=n,file不存在则报错</p><ul><li>n可省略，默认值为0，即直接冲file中读数据</li><li>通常程序只是从0中都数据，所以当n不等于0时，需要多做一步<code>3&lt;file &lt;&amp;3</code></li></ul></li></ul><p><code>cat</code>命令中经常使用到重定向，要明白<code>cat file</code>和<code>cat &lt;file</code>的区别。cat命令会读取指定的文件然后输出到标准输出，如果没有指定，则从标准输入读取数字符，然后输出字符。<code>cat file</code>是直接读取file这个文件中的内容，<code>cat &lt;file</code>是file文件被读取后内容重定向到标准输入，然后cat从标准输入读取到里面的数据，虽然结果都一样，但是里面的内容不一样。一个很经典的在shell脚本中创建配置文件的方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;a.c           #这一行的EOF表示doc的起始符</span><br><span class="line">zhw</span><br><span class="line">wan</span><br><span class="line">EOF                     #这一行的doc表示doc的终止符，前后必须一致</span><br></pre></td></tr></table></figure><p>这里需要解释一下，输入重定向是<code>&lt;</code>，除此之外，还有<code>&lt;&lt;</code>与<code>&lt;&lt;&lt;</code>，我们一般也就用到<code>&lt;&lt;</code>.<br><code>&lt;&lt;</code>符号表示here doc。也就是说，它后面跟的是一篇文档，就像一个文件一样，只不过这个文件的内容是临时定义在<code>&lt;&lt;</code>符号后面的。here doc常用语指定多行数据输入。<br>既然是文档，就有文档的起始符和终止符，这中间的内容全部是文档的内容，文档内容会被作为标准输入的数据读取。起始符和终止符可以随意定义，但是前后必须一致，一般用<code>EOF</code>来表示。</p><p><code>&lt;&lt;&lt;</code>表示here string,即后面跟的是字符串，注意</p><ul><li>双引号包围的字符串shell会对其进行解释</li><li>单引号包围的字符串shell不会对其进行解释</li></ul><p>在脚本中创建配置文件还可以使用<code>tee</code>命令,tee从标准输入中读取数据，然后写到标准输出和0或多个文件中去。换言之，tee可以实现数据多重定向。实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tee a.c &lt;&lt;EOF</span><br><span class="line">zhw</span><br><span class="line">wan</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://rancho333.gitee.io/tags/shell/">shell</category>
      
      
      <comments>https://rancho333.gitee.io/2021/02/23/shell%E9%87%8D%E5%AE%9A%E5%90%91/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>shell变量</title>
      <link>https://rancho333.gitee.io/2021/02/22/shell%E5%8F%98%E9%87%8F/</link>
      <guid>https://rancho333.gitee.io/2021/02/22/shell%E5%8F%98%E9%87%8F/</guid>
      <pubDate>Mon, 22 Feb 2021 08:28:14 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;shell变量&quot;&gt;&lt;a href=&quot;#shell变量&quot; class=&quot;headerlink&quot; title=&quot;shell变量&quot;&gt;&lt;/a&gt;shell变量&lt;/h1&gt;&lt;p&gt;标准的UNIX变量分为两类，环境变量和shell变量。广义上而言，&lt;code&gt;shell变量&lt;/code&gt;只应用于当前的shell实例，是用来设置短期工作情况的; &lt;code&gt;环境变量&lt;/code&gt;有更长远的意义，这些变量在登录时设置，在整个会话期都是有效的。一般约定，环境变量使用大写变量表示，shell变量使用小写表示。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="shell变量"><a href="#shell变量" class="headerlink" title="shell变量"></a>shell变量</h1><p>标准的UNIX变量分为两类，环境变量和shell变量。广义上而言，<code>shell变量</code>只应用于当前的shell实例，是用来设置短期工作情况的; <code>环境变量</code>有更长远的意义，这些变量在登录时设置，在整个会话期都是有效的。一般约定，环境变量使用大写变量表示，shell变量使用小写表示。</p><span id="more"></span><p>通过<code>printenv</code>命令列出所有的环境变量，<code>set</code>命令列出所有的shell变量。环境变量中存储的更多是永久性的变量,例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HOME&#x3D;&#x2F;home&#x2F;rancho</span><br></pre></td></tr></table></figure><p>这些变量很少改变，而shell变量存储本地的、临时性的、shell特有的变量,如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PWD&#x3D;&#x2F;tmp            #切换到不同的文件夹下查看该变量，该变量的值就是pwd命令的打印</span><br></pre></td></tr></table></figure><p>shell变量是shell专有的变量，不会被子进程继承，环境变量才会被继承。</p><h1 id="变量相关的一些命令"><a href="#变量相关的一些命令" class="headerlink" title="变量相关的一些命令"></a>变量相关的一些命令</h1><p>对于几个关于变量的命令的说明：</p><ul><li>set             设置和显示shell变量（包括环境变量，shell变量，函数定义, 等效于declare</li><li>env,printenv    显示环境变量</li><li>export          将shell变量导出为环境变量, 显示导出成环境变量的shell变量，并显示变量属性，等效于declare -x</li></ul><p>对于变量，其核心的点</p><ul><li>变量对应的值</li><li>变量的作用域</li></ul><p>其中，shell变量的值只能为字符串，可以用<code>declare -i</code>强制声明为数值、<br>关于变量作用域：<br>shell变量与环境变量的作用域差异主要体现在子shell继承上面；<code>source</code>或<code>.</code>与直接执行脚本的作用域差异主要体现在对当前shell环境的设置上面<br>shell命令行或shell脚本中定义的变量均为全局的，哪怕是在shell函数中定义的变量也是全局的shell变量，这与其它编程语言不同，在shell函数中使用内建命令<code>local</code>声明的变量作用域只在函数中，<code>local</code>命令也只能在函数中使用<br>同时，这一点也是很合理的，对于普通程序，如<code>ls</code>，程序执行完内存就释放了，所以里面的变量都没了；而<code>bash</code>本身也是一个程序，它并没有结束，所以里面的变量还在，如果你<code>exit</code>退出了，变量也就没了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[rancho ~]$ type -t local</span><br><span class="line">builtin</span><br><span class="line">[rancho ~]$ local a&#x3D;10</span><br><span class="line">-bash: local: can only be used in a function</span><br></pre></td></tr></table></figure><p>如果变量的作用域只想在脚本内生效，使用完之后用<code>unset</code>将之释放</p><p>此外，使用<code>var=value cmd</code>方式定义的变量作用域只在cmd的执行环境中。</p><h1 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h1><p>shell上有一些特殊变量，这些变量由shell自身动态维护，不允许用户手动修改。</p><p>这些特殊变量没有变量名，而是使用变量引用去使用这些变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$1,$2,$N：          脚本的位置参数</span><br><span class="line">$0:                 shell或shell脚本的名称，注意BASH_SOURCE变量</span><br><span class="line">$*:                 扩展为位置参数，“$*”等价于“$1 $2 $3 ... $N”</span><br><span class="line">$@:                 扩展为位置参数，“$@”等价于“$1” &quot;$2&quot; &quot;$3&quot; ... &quot;$N&quot;</span><br><span class="line">$#:                 位置参数的个数</span><br><span class="line">$$:                 当前shell进程的PID，在某些shell(如小括号开启的子shell)下会被继承。注意BASHPID变量</span><br><span class="line">$?:                 最近一个前台命令的退出状态码</span><br><span class="line">$!:                 最近一个后台命令的退出代码</span><br><span class="line">$-:                 当前shell环境的一些特殊设置，如是否是交互式，一般是himBH, 比如可以设置set -x,变成himxBH，取消set +x</span><br></pre></td></tr></table></figure><h1 id="常见环境变量"><a href="#常见环境变量" class="headerlink" title="常见环境变量"></a>常见环境变量</h1><p><code>$TERM</code>变量表示终端类型，值会是以下之一：</p><ul><li>xterm             一般是这个值</li><li>vt220             是xterm的子集，不支持颜色，可以top命令后输入z测试</li><li>xterm-color       如果在老系统，并且屏幕颜色不对时用这个类型</li><li>putty,konsole     使用终端模拟器</li><li>screen            if running inside GNU screen（or tmux）</li><li>linux             通过linux串口登录 ctrl+alt+f1</li></ul>]]></content:encoded>
      
      
      
      <category domain="https://rancho333.gitee.io/tags/shell/">shell</category>
      
      
      <comments>https://rancho333.gitee.io/2021/02/22/shell%E5%8F%98%E9%87%8F/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>shell核心机制之子shell与shell环境</title>
      <link>https://rancho333.gitee.io/2021/02/22/shell%E6%A0%B8%E5%BF%83%E6%9C%BA%E5%88%B6%E4%B9%8B%E5%AD%90shell%E4%B8%8Eshell%E7%8E%AF%E5%A2%83/</link>
      <guid>https://rancho333.gitee.io/2021/02/22/shell%E6%A0%B8%E5%BF%83%E6%9C%BA%E5%88%B6%E4%B9%8B%E5%AD%90shell%E4%B8%8Eshell%E7%8E%AF%E5%A2%83/</guid>
      <pubDate>Mon, 22 Feb 2021 02:49:31 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;深入了解shell必备的两个知识点&quot;&gt;&lt;a href=&quot;#深入了解shell必备的两个知识点&quot; class=&quot;headerlink&quot; title=&quot;深入了解shell必备的两个知识点&quot;&gt;&lt;/a&gt;深入了解shell必备的两个知识点&lt;/h1&gt;&lt;p&gt;子shell与shell环境是深入了解shell所必备的两个知识点。shell的实现方式有多种，如bash，sh，zsh等，这些软件本质就是一个shell解释器，最常用的是bash，因为其在几乎所有的Linux发行版中都预安装了。&lt;br&gt;子shell是shell命令的运行机制，而shell环境是shell命令的运行环境，就是我们常说的环境变量了。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="深入了解shell必备的两个知识点"><a href="#深入了解shell必备的两个知识点" class="headerlink" title="深入了解shell必备的两个知识点"></a>深入了解shell必备的两个知识点</h1><p>子shell与shell环境是深入了解shell所必备的两个知识点。shell的实现方式有多种，如bash，sh，zsh等，这些软件本质就是一个shell解释器，最常用的是bash，因为其在几乎所有的Linux发行版中都预安装了。<br>子shell是shell命令的运行机制，而shell环境是shell命令的运行环境，就是我们常说的环境变量了。</p><span id="more"></span><h1 id="命令类型与子shell"><a href="#命令类型与子shell" class="headerlink" title="命令类型与子shell"></a>命令类型与子shell</h1><p>并不是在shell里执行的所有命令都会在子shell里执行，我们需要先认识一下shell命令分类。</p><p><code>type</code>命令可以可以显示出命令的类型，对于不同的类型shell解释器有不同的处理方式。命令类型有以下几种：</p><ul><li>alias(shell alias)</li><li>function(shell functions)，shell函数</li><li>builtin(shell builtin)，shell内建命令</li><li>file(disk file)，磁盘文件，需要有可执行权限，我们安装的第三方软件一般就是这种类型，在PATH下找到，这个是外部命令，如ssh、ls</li><li>keyword(shell reserved word)，shell保留关键字，如for、done、while等，在shell脚本中很常用</li></ul><p><code>type</code>的常用参数如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-t      打印命令类型，上述5种类型之一</span><br><span class="line">-a      打印所有包含该命令的文件位置</span><br></pre></td></tr></table></figure><p>shell对于不同的命令类型，处理方式如下：</p><ul><li>file(外部命令)的执行：先fork shell子进程，在后在子shell进程中exec调用外部命令</li><li>function、builtin、keyword: 这些命令依赖于shell进程，没有shell进程，他们都没有意义。他们都是直接在当前shell进程内执行的，不会创建新的子shell进程来执行</li><li>alias:在命令解析阶段替换成对应的内容，然后重新执行命令解析</li></ul><p>当alias、keyword、function、builtion、file冲突时，会按照优先级进行执行，优先级从左至右依次递减。</p><p>对于使用子shell方式执行cmd</p><ol><li>当前shell进程fork创建一个子shell进程，子shell继承父shell大量属性，如变量</li><li>子shell进程通过exec调用执行cmd, 并用cmd代码替换刚才创建的子shell进程(子shell进程继承自父shell进程的属性会被覆盖)，于是子shell进程就变成cmd进程，所以父shell的子进程变成了cmd进程</li><li>父shell进程wait子cmd进程退出</li></ol><p>伪代码描述如下, 以执行<code>ls -lah</code>命令为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pid &#x3D; fork();</span><br><span class="line">if(pid &#x3D;&#x3D; 0 ) &#123;</span><br><span class="line">    &#x2F;&#x2F;子进程中，调用exec</span><br><span class="line">    exec(&quot;ls -lah&quot;)</span><br><span class="line">&#125; else if (pid &gt; 0) &#123;</span><br><span class="line">    &#x2F;&#x2F;父进程中，waitpid等待子进程退出</span><br><span class="line">    waitpid(pid);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>通过<code>$BASHPID</code>可以查看当前bash进程的pid，从而判断在那个shell(父还是子).</p><h1 id="shell命令的运行环境"><a href="#shell命令的运行环境" class="headerlink" title="shell命令的运行环境"></a>shell命令的运行环境</h1><p>每个shell进程有一个自己的运行环境，不同的shell进程有不同的shell环境。shell解析命令行、调用命令行的过程都在这个环境中完成。</p><p>shell运行环境由配置文件来完成初始化，bash会读取的配置文件有：</p><ul><li>/etc/profile</li><li>/etc/profile.d/*.sh</li><li>~/.bash_profile</li><li>~/.bashrc</li><li>/etc/bashrc</li></ul><p>shell分为login shell、non-login shell与interactive shell、non-interactive shell，不同的shell加载的配置文件是不同的。</p><p>环境主要体现在对环境的设置，包括但不限于环境的设置有：</p><ul><li><code>cd /tmp</code>表示设置当前shell环境的工作目录</li><li>shopt或set命令进行shell的功能设置，可在配置文件中找到相关设置</li><li>环境变量设置<ul><li>主要用于shell进程和其子进程之间的数据传递</li><li>子进程（不仅仅是子shell进程）可以继承父shell环境中的环境变量</li><li>环境变量通常以大写字母定义，非一定</li><li>使用bash内置命令<code>export</code>可以定义环境变量</li><li>命令前定义变量<code>var=value cmd</code>，表示定义一个专属环境变量，该环境变量只能在cmd进程环境中可以访问，cmd进程退出后，var环境变量也消失</li></ul></li><li><code>export var=value</code>表示在当前shell环境下定义一个环境变量var，以便让子进程继承这个变量</li></ul><p>每当提到shell内置命令，就要想到这个命令的作用有可能是在当前shell环境下进行某项设置<br>shell内置命令不会创建新进程，而是直接在当前shell环境内部执行<br>内置命令<code>source</code>或<code>.</code>执行脚本时，表示在当前shell环境下执行脚本内容，即脚本中所有设置操作都会直接作用于当前shell环境<br>父shell环境可能影响子shell环境，但子shell环境一定不影响父shell环境，比如子shell脚本中的环境变量不会粘滞到父shell环境中</p><h2 id="shell环境-属性设置"><a href="#shell环境-属性设置" class="headerlink" title="shell环境/属性设置"></a>shell环境/属性设置</h2><p><code>bash</code>也是一个程序，一个命令，它可以通过设置选项来修改其某些属性，这些属性可以提高bash的安全性和可维护性。</p><ul><li>-u        遇到未定义的变量抛出错误，bash默认忽略它，当作空来处理</li><li>-x        显示bash执行的执行命令，在前面用<code>+</code>来区分命令和命令的输出；如果遇到-u的错误，不会打印该命令(测试所得)</li><li>-e        脚本发生错误，终止执行</li></ul><p>这里注意一个特殊场景即管道命令，bash会把管道命令最后一个子命令的返回值作为整个命令的返回值，也就是说，只要最后一个命令不失败，管道命令总是会执行成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">set -eux</span><br><span class="line">demo | echo adsad</span><br><span class="line">echo afe</span><br></pre></td></tr></table></figure><p>此处<code>demo</code>未定义，执行失败，但是<code>echo adsad</code>会执行成功，所以管道命令<code>demo | echo adsad</code>的返回值是<code>0</code>,脚本接下来的命令<code>echo afe</code>会继续执行，<code>set -e</code>在这里就失效了。使用<code>set -o pipefaile</code>可以解决这种情况，只要一个子命令失败，整个管道命令就失败，脚本就会终止执行。注意配合<code>set -e</code>一起使用才会生效，即<code>set -o pipeline</code>是<code>set -e</code>的一个补丁。</p><p>养成好习惯，在所有bash脚本开头加上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set -euxo pipefail</span><br></pre></td></tr></table></figure><p>如果有意让退出状态不为0的程序使用<code>cmd || true</code></p><p>此外，shell可以关闭模式扩展</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set -o noglob</span><br><span class="line">或者</span><br><span class="line">set -f</span><br></pre></td></tr></table></figure><h1 id="关于引号"><a href="#关于引号" class="headerlink" title="关于引号"></a>关于引号</h1><p>子shell和shell环境是shell机制方面的核心，其实引号在shell中的重要性与之可比肩。<br>在许多编程语言中，引号被用来表明：包含在里面的文本会被解析成字符串。但是在shell中，只有一种数据类型就是字符串。因此，字符串相关的引号和转义，对bash来说就非常重要。</p><p>引号的功能：</p><ul><li>防止保留字符被替换，如<code>echo &#39;$&#39;</code></li><li>防止域分割和通配符，如包含空格的文件名</li><li>参数扩展，如<code>&quot;$@&quot;</code></li></ul><p>有三种标准的引号(如果算上转义是4种)，和2种非标准的bash扩展用法。</p><ul><li>单引号(single quotes)：移除在单引号之间所有字符的特殊含义, 避免被bash自动扩展。单引号之间的所有东东都会变成字符串(literal string)，唯一不能安全的被单引号修饰的字符就是单引号本身，即使使用了转义符也不行</li><li>双引号(double quotes)：双引号中不会进行文件名扩展，但是三个字符除外<code>$</code> <code>反引号</code> <code>\</code>，如果开启了<code>!</code>引用历史命令，则<code>!</code>也除外。大部分特殊字符在双引号中会失去特殊含义，变成普通字符，如<code>*</code></li><li>反引号(<code>backticks</code>)：这是命令替换语法的遗产，现在使用<code>$(...)</code>替代，但因为历史问题，现在依然被允许使用</li><li>转义符()：将<code>\</code>放在元字符($、&amp;、*、)前面去掉其特殊含义，如 <code>echo \$？</code>, 在双引号和没有引号中有效，在单引号中无效.反斜杠除了用于转义，还可以表示一些不可打印的字符<ul><li>\a    响铃</li><li>\b    退格</li><li>\n    换行</li><li>\r    回车</li><li>\t    制表符<br>所以在命令结尾结尾加上<code>\</code>，其实就是在换行符前加上转义，使得换行符变成一个普通字符，bash会将其当作空格处理，从而可以将一行命令写成多行。</li></ul></li></ul><p>这里举一个<code>find</code>使用的小例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[rancho test]$ ls</span><br><span class="line">a.c  c  deb  kernel  linux  make  python  shell</span><br><span class="line"></span><br><span class="line">[rancho test]$ find .&#x2F; -name &quot;*.c&quot;</span><br><span class="line">.&#x2F;shell&#x2F;a.c</span><br><span class="line">.&#x2F;shell&#x2F;b.c</span><br><span class="line">.&#x2F;a.c</span><br><span class="line">.&#x2F;deb&#x2F;zhw-1.0.0&#x2F;a.c</span><br><span class="line">.&#x2F;python&#x2F;a.c</span><br><span class="line">.&#x2F;linux&#x2F;a.c</span><br><span class="line">.&#x2F;c&#x2F;syntax.c</span><br><span class="line"></span><br><span class="line">[rancho test]$ find .&#x2F; -name *.c</span><br><span class="line">.&#x2F;shell&#x2F;a.c</span><br><span class="line">.&#x2F;a.c</span><br><span class="line">.&#x2F;deb&#x2F;zhw-1.0.0&#x2F;a.c</span><br><span class="line">.&#x2F;python&#x2F;a.c</span><br><span class="line">.&#x2F;linux&#x2F;a.c</span><br><span class="line">[rancho test]$ </span><br></pre></td></tr></table></figure><p>第一次使用find，传给它的参数是<code>*.c</code>，find会在当前目录下面去找所有以<code>.c</code>结尾的文件<br>第二次使用find, 传给它的参数是<code>a.c</code>，注意当前目录下面有<code>a.c</code>，所以<code>*.c</code>会被shell模式扩展为<code>a.c</code>；如果当前目录下没有<code>.c</code>文件，则扩展失败，原样输出<code>*.c</code>，这时候和用双引号修饰效果是一样的。<br>shell模式扩展完之后才会调用命令，所以一定要主要哪些词元是给shell做模式扩展的，哪些是直接传递给命令的，我们通过引号进行标识告知bash。</p><h1 id="shell核心知识点"><a href="#shell核心知识点" class="headerlink" title="shell核心知识点"></a>shell核心知识点</h1><p>最开始是想记录下<code>子shell</code>与<code>shell环境</code>这两个知识点的，后来越来越多的发现自己不知道某些知识点或者知识点认识模糊，shell笔记也有好几个文件了，这里列举一下shell中比较重要的知识点。</p><ul><li>子shell</li><li>shell命令执行环境</li><li>模式扩展(通配符扩展、变量扩展、子命令扩展、算术扩展)，expansion，globbing and word splitting</li><li>引用(引号和转义)</li><li>shell变量(变量引用，变量替换)</li><li>退出和退出状态</li><li>各种test(文件测试、字符串测试、数值测试)</li><li>循环和分支</li><li>shellcheck   这个并不是shell的知识点，而是一个shell脚本的检查工具，python，C都有这种检查工具，可以很好的帮我们检查一些通用的易错的语法问题，强烈建议使用</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://wangdoc.com/bash/">Bash脚本教程</a><br><a href="https://google.github.io/styleguide/shellguide.html">Google shell脚本代码规法</a><br><a href="https://coolshell.cn/articles/19219.html">打造高效工作环境-shell篇</a></p>]]></content:encoded>
      
      
      
      <category domain="https://rancho333.gitee.io/tags/shell/">shell</category>
      
      
      <comments>https://rancho333.gitee.io/2021/02/22/shell%E6%A0%B8%E5%BF%83%E6%9C%BA%E5%88%B6%E4%B9%8B%E5%AD%90shell%E4%B8%8Eshell%E7%8E%AF%E5%A2%83/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>shell语法简析</title>
      <link>https://rancho333.gitee.io/2021/02/20/shell%E8%AF%AD%E6%B3%95%E7%AE%80%E6%9E%90/</link>
      <guid>https://rancho333.gitee.io/2021/02/20/shell%E8%AF%AD%E6%B3%95%E7%AE%80%E6%9E%90/</guid>
      <pubDate>Sat, 20 Feb 2021 08:14:32 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;问题说明&quot;&gt;&lt;a href=&quot;#问题说明&quot; class=&quot;headerlink&quot; title=&quot;问题说明&quot;&gt;&lt;/a&gt;问题说明&lt;/h1&gt;&lt;p&gt;在shell下遇到一个赋值的问题&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h1><p>在shell下遇到一个赋值的问题</p><span id="more"></span><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[rancho ~]$ a&#x3D;10</span><br><span class="line">[rancho ~]$ demo$a&#x3D;$(echo 123)</span><br><span class="line">demo10&#x3D;123: command not found</span><br></pre></td></tr></table></figure><h1 id="shell下的命令格式"><a href="#shell下的命令格式" class="headerlink" title="shell下的命令格式"></a>shell下的命令格式</h1><p>shell下我们常用的命令格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var&#x3D;value           #变量赋值，例如a&#x3D;1</span><br><span class="line">cmd [args]          #命令执行，例如ls -l</span><br><span class="line">&gt;redirection        #重定向,例如:&gt;a.c </span><br></pre></td></tr></table></figure><p>实际上，bash中的一个简单命令的完整格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var&#x3D;value ... cmd args &gt;redirection ...</span><br></pre></td></tr></table></figure><p>一个完整的简单命令由三部分组成：变量赋值部分、命令和参数部分、重定向部分，只是很多时候我们会省略一些部分的内容。<br>其中：</p><ul><li>变量赋值和重定向可以有多个</li><li>变量赋值必须在cmd前面，并且变量名必须符合bash要求的命令规则<ul><li>定义变量时，普通变量名是字母、数字、下划线的组合，且不能以数字开头</li><li>调用变量时，在变量名前加<code>$</code>，shell有一部分特殊变量如<code>$0 $1 $$</code></li></ul></li></ul><p>对于变量赋值：</p><ul><li>如果有变量赋值而没有命令执行部分，则变量赋值在当前shell下生效</li><li>如果有变量赋值也有命令执行部分，则变量赋值只作用于改命令，对当前shell无影响</li><li>如果变量名不符合bash的命令规范，则不认为是变量赋值语句，而是当作cmd部分</li></ul><h1 id="问题说明-1"><a href="#问题说明-1" class="headerlink" title="问题说明"></a>问题说明</h1><p><code>demo$a</code>不是一个有效的变量名，所以会当作cmd来执行，但是在执行之前会从左到右执行shell命令解析规则，得到<code>demo10=123</code>，之后将其作为命令进行执行，找不到改命令从而报错。类似的，输入<code>123das=10</code>也会报这种错误。</p>]]></content:encoded>
      
      
      
      <category domain="https://rancho333.gitee.io/tags/shell/">shell</category>
      
      
      <comments>https://rancho333.gitee.io/2021/02/20/shell%E8%AF%AD%E6%B3%95%E7%AE%80%E6%9E%90/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
